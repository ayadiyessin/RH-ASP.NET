// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProjetDotnet.Data;

#nullable disable

namespace ProjetDotnet.Migrations
{
    [DbContext(typeof(GestionRHContext))]
    partial class GestionRHContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ProjetDotnet.Areas.Identity.Data.Admin", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("archive_admin")
                        .HasColumnType("int");

                    b.Property<int>("etat_admin")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ProjetDotnet.Models.Conge", b =>
                {
                    b.Property<int>("Id_conge")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_conge"));

                    b.Property<int?>("confirmation_conge")
                        .HasColumnType("int");

                    b.Property<DateTime>("date_deb_conge")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("date_env_conge")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("date_fin_conge")
                        .HasColumnType("datetime2");

                    b.Property<string>("description_conge")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("employerId")
                        .HasColumnType("int");

                    b.Property<string>("type_conge")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id_conge");

                    b.HasIndex("employerId");

                    b.ToTable("Conges");
                });

            modelBuilder.Entity("ProjetDotnet.Models.Departement", b =>
                {
                    b.Property<int>("Id_dep")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_dep"));

                    b.Property<string>("Nom_dep")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("archive_dep")
                        .HasColumnType("int");

                    b.Property<string>("description_dep")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id_dep");

                    b.ToTable("Departements");
                });

            modelBuilder.Entity("ProjetDotnet.Models.Employer", b =>
                {
                    b.Property<int>("Id_emp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_emp"));

                    b.Property<int?>("Id_post")
                        .HasColumnType("int");

                    b.Property<string>("adresse_emp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("archive_emp")
                        .HasColumnType("int");

                    b.Property<int>("cin_emp")
                        .HasColumnType("int");

                    b.Property<DateTime>("date_embauche_emp")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("date_naissance_emp")
                        .HasColumnType("datetime2");

                    b.Property<string>("email_emp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("nom_emp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("numtell_emp")
                        .HasColumnType("int");

                    b.Property<string>("prenom_emp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("psw_emp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("sexe_emp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ville_emp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id_emp");

                    b.HasIndex("Id_post");

                    b.ToTable("Employers");
                });

            modelBuilder.Entity("ProjetDotnet.Models.EmployerFormation", b =>
                {
                    b.Property<int>("Id_empform")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_empform"));

                    b.Property<int>("employerId")
                        .HasColumnType("int");

                    b.Property<int>("formationId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("date_deb_empform")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("date_fin_empform")
                        .HasColumnType("datetime2");

                    b.HasKey("Id_empform", "employerId", "formationId");

                    b.HasIndex("employerId");

                    b.HasIndex("formationId");

                    b.ToTable("EmployerFormations");
                });

            modelBuilder.Entity("ProjetDotnet.Models.Formation", b =>
                {
                    b.Property<int>("Id_formation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_formation"));

                    b.Property<int?>("archive_formation")
                        .HasColumnType("int");

                    b.Property<string>("description_formation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("nom_formation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id_formation");

                    b.ToTable("Formations");
                });

            modelBuilder.Entity("ProjetDotnet.Models.Poste", b =>
                {
                    b.Property<int>("Id_post")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_post"));

                    b.Property<int?>("Id_dep")
                        .HasColumnType("int");

                    b.Property<string>("Nom_post")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("archive_poste")
                        .HasColumnType("int");

                    b.Property<string>("description_post")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("salaire_post")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id_post");

                    b.HasIndex("Id_dep");

                    b.ToTable("Postes");
                });

            modelBuilder.Entity("ProjetDotnet.Models.Tache", b =>
                {
                    b.Property<int>("Id_tache")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_tache"));

                    b.Property<DateTime>("date_deb_tache")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("date_fin_tache")
                        .HasColumnType("datetime2");

                    b.Property<string>("description_rapp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("employerId")
                        .HasColumnType("int");

                    b.Property<string>("nom_tache")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id_tache");

                    b.HasIndex("employerId");

                    b.ToTable("Taches");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ProjetDotnet.Areas.Identity.Data.Admin", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ProjetDotnet.Areas.Identity.Data.Admin", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjetDotnet.Areas.Identity.Data.Admin", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ProjetDotnet.Areas.Identity.Data.Admin", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjetDotnet.Models.Conge", b =>
                {
                    b.HasOne("ProjetDotnet.Models.Employer", "Employer")
                        .WithMany()
                        .HasForeignKey("employerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employer");
                });

            modelBuilder.Entity("ProjetDotnet.Models.Employer", b =>
                {
                    b.HasOne("ProjetDotnet.Models.Poste", "Poste")
                        .WithMany("Employees")
                        .HasForeignKey("Id_post")
                        .HasConstraintName("FK_emp_post");

                    b.Navigation("Poste");
                });

            modelBuilder.Entity("ProjetDotnet.Models.EmployerFormation", b =>
                {
                    b.HasOne("ProjetDotnet.Models.Employer", "Employer")
                        .WithMany()
                        .HasForeignKey("employerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjetDotnet.Models.Formation", "Formation")
                        .WithMany()
                        .HasForeignKey("formationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employer");

                    b.Navigation("Formation");
                });

            modelBuilder.Entity("ProjetDotnet.Models.Poste", b =>
                {
                    b.HasOne("ProjetDotnet.Models.Departement", "Departement")
                        .WithMany("Postes")
                        .HasForeignKey("Id_dep")
                        .HasConstraintName("FK_dep_post");

                    b.Navigation("Departement");
                });

            modelBuilder.Entity("ProjetDotnet.Models.Tache", b =>
                {
                    b.HasOne("ProjetDotnet.Models.Employer", "Employer")
                        .WithMany()
                        .HasForeignKey("employerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employer");
                });

            modelBuilder.Entity("ProjetDotnet.Models.Departement", b =>
                {
                    b.Navigation("Postes");
                });

            modelBuilder.Entity("ProjetDotnet.Models.Poste", b =>
                {
                    b.Navigation("Employees");
                });
#pragma warning restore 612, 618
        }
    }
}
